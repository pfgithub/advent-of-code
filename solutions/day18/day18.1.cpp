#include <bits/stdc++.h>
#include <iostream>
#include <vector>
using namespace std;

typedef struct {
  int x;
  int y;
} Position;

typedef struct {
  int x;
  int y;
  int steps;
  bool found;
} Key;

typedef char Board[81][81];
typedef int PathBoard[81][81];
typedef Key FoundKeys[26];

void findpath(Board &board, PathBoard &pathfind, FoundKeys &foundKeys, int x,
              int y, int steps) {
  char currentChar = board[y][x];
  if (currentChar == '.' || (currentChar >= 'a' && currentChar <= 'z')) {
    if (steps < pathfind[y][x]) {
      pathfind[y][x] = steps;
      if (currentChar == '.') {
        // while (true) {
        //   int dotcnt = 0;
        //   int dirx = 0;
        //   int diry = 0;

        //   char dira = board[y][x + 1];
        //   char dirb = board[y][x - 1];
        //   char dirc = board[y + 1][x];
        //   char dird = board[y - 1][x];

        //   if (dira == '.' && steps < pathfind[y][x + 1]) {
        //     dotcnt++;
        //     dirx = 1;
        //   };
        //   if (dirb == '.' && steps < pathfind[y][x - 1]) {
        //     dotcnt++;
        //     dirx = -1;
        //   };
        //   if (dirc == '.' && steps < pathfind[y + 1][x]) {
        //     dotcnt++;
        //     diry = 1;
        //   };
        //   if (dirb == '.' && steps < pathfind[y - 1][x]) {
        //     dotcnt++;
        //     diry = -1;
        //   };
        //   if ((dira >= 'a' && dira <= 'z') || (dirb >= 'a' && dirb <= 'z') ||
        //       (dirc >= 'a' && dirc <= 'z') || (dird >= 'a' && dird <= 'z'))
        //     break;
        //   if (dotcnt > 1)
        //     break;
        //   if (dotcnt == 0)
        //     return;
        //   x += dirx;
        //   y += diry;
        //   steps++;
        //   pathfind[y][x] = steps;
        // }
        findpath(board, pathfind, foundKeys, x + 1, y, steps + 1);
        findpath(board, pathfind, foundKeys, x - 1, y, steps + 1);
        findpath(board, pathfind, foundKeys, x, y + 1, steps + 1);
        findpath(board, pathfind, foundKeys, x, y - 1, steps + 1);
      } else {
        foundKeys[currentChar - 'a'] = {
            .x = x, .y = y, .steps = steps, .found = true};
      }
    }
  }
}

int getSteps(Board &board, PathBoard &pathfind, Position playerPos, int steps,
             string currentPath, int &minSteps) {
  if (steps > minSteps) {
    return steps + 10;
  }
  for (int y = 0; y < 81; y++) {
    for (int x = 0; x < 81; x++) {
      pathfind[y][x] = 10000;
    }
  }
  FoundKeys foundKeys;
  for (int i = 0; i < 26; i++) {
    foundKeys[i] = {.x = 0, .y = 0, .steps = 0, .found = false};
  }
  findpath(board, pathfind, foundKeys, playerPos.x, playerPos.y, 0);

  int length = 0;
  int finalStepCount = 100000;
  vector<char> closest;
  for (int i = 0; i < 26; i++) {
    if (foundKeys[i].found) {
      length++;
      closest.push_back(i);
    }
  }
  sort(closest.begin(), closest.end(), [foundKeys](char a, char b) {
    return foundKeys[a].steps < foundKeys[b].steps;
  });
  for (auto i : closest) {
    if (currentPath.length() < 10) {
      cout << "doing " << (char)(i + 'a') << endl;
    }
  }
  for (auto i : closest) {
    // do work
    char keyName = i + 'a';
    char doorName = i + 'A';
    Key foundKey = foundKeys[i];

    int doorX = 0;
    int doorY = 0;

    for (int y = 0; y < 81; y++) {
      for (int x = 0; x < 81; x++) {
        if (board[y][x] == doorName) {
          doorX = x;
          doorY = y;
        }
      }
    }

    board[doorY][doorX] = '.';
    board[foundKey.y][foundKey.x] = '.';

    if (currentPath.length() < 10) {
      cout << currentPath << keyName << " " << minSteps << endl;
    }

    int stepCount =
        getSteps(board, pathfind, {.x = foundKey.x, .y = foundKey.y},
                 steps + foundKey.steps, currentPath + keyName, minSteps);
    if (stepCount < finalStepCount)
      finalStepCount = stepCount;

    board[doorY][doorX] = doorName;
    board[foundKey.y][foundKey.x] = keyName;
  }
  if (length == 0) {
    if (steps < minSteps) {
      minSteps = steps;
      cout << currentPath << " FOUND MIN " << steps << endl;
    }
    return steps;
  }
  return finalStepCount;
}

int main() {
  Board board;
  PathBoard pathfind;
  string boardInitial = "######################################################"
                        "###########################\n"
                        "#.........#.............#.......#.....#.#............."
                        "........#...#..c#.........#\n"
                        "#.###.#####.#######.#####.###.#.#.###.#.#.#######.####"
                        "#######.#.#.###.#.#####.#.#\n"
                        "#.#.#.#e..#...#.#...#.....#.#.#...#.....#..b#...#.#..."
                        "......#...#.....#.#.T..r#.#\n"
                        "#.#.#.#.#.###.#.#.#.#.#####.#.#############.#.###.#.##"
                        "###.#.#.#######.#.#.#######\n"
                        "#.#...#.#...#...#.#.#.#.....#.........K.#.#.#...#.#.#."
                        "..#.#...#...#...#.#.......#\n"
                        "#.###.#.###.#.###.#.#.#.###.###########.#.#.###.#.###."
                        "#.#.#####.#.#.###.#######.#\n"
                        "#...#.#...#...#...#.#...#.#...#.....#...#.#.#...#....."
                        "#.#.#.....#.#...#.#.#.....#\n"
                        "###.#.###.#####.#########.###.#.###.#.#.#.#.#.#.######"
                        "#.#.#O#####.#####.#.#.###.#\n"
                        "#...#.#.#...#.#.............#.#.#...#.#.#...#x#.#....."
                        "#.#.#...#z#.....#.#.#.#...#\n"
                        "#.###.#R###.#.#####.#.#######.#.#.###.#.#.###.#.#.###."
                        "#.#.###.#.#####.#.#.#.#####\n"
                        "#.#...#...#.#.....#.#.#.....#.#.#.#...#.#...#.#...#..."
                        "#.#.#.......#...#...#.....#\n"
                        "#.#.#####.#.###.#.#.#.#.###.#.#.#.#.#######.#.#####L##"
                        "#.#.#.#####.#.#####.#####.#\n"
                        "#.#.......#...#.#.#.#.#...#...#.#.#...Y.#.#.#...#....."
                        "#.#.#.#...#.#.......#....q#\n"
                        "#.###########.#.#.#.#####.#######.#####.#.#.###.######"
                        "#.###.#.#.#.#########.###.#\n"
                        "#...#.......#.#.#.#...#...#..h..#.....#.#.......#....."
                        "#...#.#.#.#.#.......#.#...#\n"
                        "#.#.#.#####.#.#.#.###.#.###.###.###.###.#######.#.###."
                        "###.#.#.#.#.#.#######.#.###\n"
                        "#.#.....#...#.#.#...#.#.#...#.....#.#...#...#...#...#."
                        "..#...#.#.#.#.#.......#.#.#\n"
                        "#########.###.#####.#.#.#F#.#####.#.#.###.#.###.###.##"
                        "#.#.###.#.#.#.#.#######.#.#\n"
                        "#.........#...#.....#...#.#.#...#...#.#s#.#...#.#...#."
                        "..#.#...#.#.#.#.#...#...#.#\n"
                        "#.#####.###.###.#.#####.#.###.#.###.#.#.#.###.###.###."
                        "#####.###.#.#.#.#.###.###.#\n"
                        "#..d#...#...#...#.#...#...#...#.#...#.#.#.#.#.....#.#."
                        "......#...#...#.#...#.#...#\n"
                        "#.#.#####.###.#.###.#######.###.#####.#.#.#.#######.##"
                        "###########.###.#.#.#.###.#\n"
                        "#.#.....#...#.#...#.........#.#.......#.#.......#....."
                        "#.....#.....#...#.#.#.....#\n"
                        "#.#####.###.#####.###########.#########.#######.#.###."
                        "###.#.#####.#.#####.#####.#\n"
                        "#.#...#...#...#...#.......#...........#.#.....#...#..."
                        "#...#.....#.#...#.....#...#\n"
                        "#.#.###.#.###.#.#.#.#####.###.#######.#.#.###.#####.##"
                        "#.#######.#####.#.#####.###\n"
                        "#.#.#...#.#.#.#.#...#.....#...#.......#.#.#.#.....#..."
                        "#.#.....#.#.....#.........#\n"
                        "#.#.#.###.#.#.#.#####.#####.#####.#####.#.#.###.#.###."
                        "#.#.#.###.#.#.#######.#####\n"
                        "#...#.#.#...#.#...#.#.#...#.....#.#.....#.....#.#...#."
                        "..#.#.#...#.#j#.....#.#.W.#\n"
                        "#####.#.###.#.###.#.#.#.#.#####.#.###.#.#####.#.######"
                        "###.###.###.###.###.###.#.#\n"
                        "#...#.#.....#.#...#.#.#.#.......#.....#.#.#...#......."
                        "..#.....#.....#...#...#.#.#\n"
                        "#.#.#.#####.#.#.###.#.#.###############.#.#.#########."
                        "###.#########.#.#####.#.#.#\n"
                        "#.#...#...#.#.#w..#...#...#...........#.#.#.#.......#."
                        "..#...#.....#...#.V.#...#.#\n"
                        "#.#####.#.###.###.#.###.#.#.###########.#.#.#####.#.##"
                        "#.###.###.#M#####.#.#####.#\n"
                        "#.....#.#...#.....#.#.#.#.#.A.#...#.....#.#.......#..."
                        "#...#...#.#.......#.......#\n"
                        "#####.#.###.#######.#.#.#.#.#.#.#.#.#####.###########."
                        "###.###.#.###############.#\n"
                        "#.....#.#.#.......#.#...#.#.#...#.#.....#...#.......#."
                        "#.#.#...#.....#.#.....#...#\n"
                        "#.#####.#.#######.#.#####.#.#####.#####.#.#.#.###.###."
                        "#.#.#.#######.#.#.###.#.###\n"
                        "#............v..#.........#.....#.........#.....#....."
                        "..#...........#.....#.....#\n"
                        "#######################################.@.############"
                        "###########################\n"
                        "#.#.....G.....#.....#.......#.........#.........#....."
                        "..#...........#.......#...#\n"
                        "#.#.###.#####.#####.#.#####.#.###.###.#.#.#####.#####."
                        "#.#######.###.#.###.#.###.#\n"
                        "#.#.#.#.....#.......#.#...#...#.#.#.....#.#...#......"
                        "a#.......#...#.#.#...#.#...#\n"
                        "#.#.#.#####.#######.#.#.#.#####.#.#####.#.#.#.########"
                        "#######.###.#.#.#.###.#.#.#\n"
                        "#.#..n....#.#.......#.#.#...#...#.....#.#.#.#...#....."
                        "#.....#...#.#...#...#.#.#.#\n"
                        "#.#######.#.#########.#.###.#.#######.#.#.#.#####.#.##"
                        "#.#.#.###.#########P#.#.###\n"
                        "#...#.#...#...#u..#...#.#...#.......#.#.#.#...#...#..."
                        "..#.#...#.....#...#.#.#...#\n"
                        "#.#.#.#.#####.#.#.#.###.###.###.###.#.#.#.###.#.######"
                        "###.###.#####.#.#U#.#.###.#\n"
                        "#.#...#p..#.#...#...#.....#.....#...#.#.#...#.#.#....."
                        "#...#...#...#...#.#.#...#.#\n"
                        "#.###.###.#.###########.#.###########.#####.#.#.###.#."
                        "#.###.###.#.#####.#.###.#.#\n"
                        "#...#.#...#...#.......#.#.#..k..#...#...#...#.#.#...#."
                        "#.#...#...#...#...#...#.#.#\n"
                        "#.#.###.###.#.###.###.###.#.###.#.#.###.#.###.#.#.###"
                        "C#Z###.#.#####.#.###.#.#.#.#\n"
                        "#.#.........#.....#.#.#...#.#...#.#...#.#...#.#.#.#..."
                        "#...#.#.....#.#...#.#.#.#.#\n"
                        "#.#################.#.#.###.#.###.###.#.#.#.#.#.#.#.##"
                        "###.#.###.###.###.###.#.#.#\n"
                        "#m....#...........#.#...#...#...#...#.#.#.#.#.#.#.#.#."
                        "....#...#.#...#..g#.N.#...#\n"
                        "#.#####.#########.#.###.#.#####.###.#.#.###.#.#.#B#.#."
                        "#########.#.###.###.#####.#\n"
                        "#.#.....#.....#...#.....#.#...#.#...#...#...#.....#.#."
                        "......#...#...#...#.#i..#.#\n"
                        "###.#######.###.#########.#.###.#.#######.#########.##"
                        "#####.#.#####.###.#.#.#.#.#\n"
                        "#...#.......#...#....y....#...#.#.#.....#.#...S.#...#."
                        "....#.......#.#...#.#.#.#.#\n"
                        "#.###.#####.#.#.#.#########.#.#.#.#.###.#.#.###.#.###."
                        "###.#####.###.#.###.#.#.#.#\n"
                        "#...#.#.#...#.#.#.....#...#.#...#.....#.#.....#.#...#."
                        "#.....#.#.#...#.....#.#.#.#\n"
                        "###.#.#.#.###.#########.#.#.#####.#####.#######.###X#."
                        "#######.###.#.#######.###.#\n"
                        "#...#.#.#...#...........#.#...#...#.....#...#...#...#."
                        "#.......#...#.....#.......#\n"
                        "#Q###.#.###.#####.###########.#.###.###.#.#.#.#####.#."
                        "#.#######.#########.#######\n"
                        "#.....#...#.#...#.........#...#.#...#.#.#.#.#.....#..."
                        "#...#.....#.......#.......#\n"
                        "#######.###.#.###########.#.#####.###.#.#.#.#####.###."
                        "###.#####.#D#####.#######.#\n"
                        "#.....#...#.#.......#...#...#.....#.....#.#.#...#.#..."
                        ".l#...#...#.#...#.......#.#\n"
                        "###.#.###.#.###.###.###.#####.#.#########.#.#.###.####"
                        "#####.#.#.#.###.#######.#.#\n"
                        "#...#...#.#.....#...#.......#.#.........#.#.#.#...#..."
                        "#...#.#.#.#...#.......#...#\n"
                        "#.#####.#.#######.###.#######.#########.#.#.#.#.###.#."
                        "#.#.#.#.#.###.#.#####.#####\n"
                        "#.#..t#.#.....#...#.............#.....#.#.#.#.#.....#."
                        "..#...#.#.#...#.#...#.....#\n"
                        "#.###.#.#.#####.###.###########.#.#.###.#.#.#.########"
                        "#######.#.#.#####.#.#####.#\n"
                        "#...#.....#...#.#.....#.......#...#.#...#.#.........#."
                        "........#.#.......#.#.....#\n"
                        "#E#.#.#####.#.#.#####.#.#####.#####.#.###.###.#######."
                        "#####.#############.#.#####\n"
                        "#.#.#...#...#.#...#...#.#...#...#...#...#...#.#.....#."
                        "#...#.........#.....#.#...#\n"
                        "###.#####.###I###.#.###.#.#.###.#####.#.#.#.###.###.#."
                        "#.#######.#####.#####.#.#.#\n"
                        "#...#...#...#...#.#.#...#.#...#.#...#.#.#.#..f..#.#..."
                        "#.....#...#.....#...#...#.#\n"
                        "#.###.#.###.#.###.###.###.#####.#.#.###.#.#######.####"
                        "#####.#.###.#####.#.#####.#\n"
                        "#.J...#.....#.........#...........#.....#............."
                        "H....o#...........#.......#\n"
                        "######################################################"
                        "###########################\n";

  Position playerPos;

  for (int y = 0; y < 81; y++) {
    for (int x = 0; x < 81; x++) {
      board[y][x] = '!';
    }
  }

  int x = 0;
  int y = 0;

  for (int i = 0; i < boardInitial.length(); i++) {
    if (boardInitial[i] == '\n') {
      y++;
      x = 0;
    } else {
      board[y][x] = boardInitial[i];
      if (boardInitial[i] == '@') {
        playerPos.x = x;
        playerPos.y = y;
        board[y][x] = '.';
      }
      pathfind[y][x] = 10000;
      x++;
    }
  }

  int minSteps = 4686;

  int finalSteps = getSteps(board, pathfind, playerPos, 0, "", minSteps);
  cout << "STEPS IS, " << finalSteps << endl;

  return 0;
}